name: PR Baseline Check (FIXED)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '18'

jobs:
  baseline-check:
    name: Baseline Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: |
          echo "Building baseline-lint package..."
          npm run build || echo "Build step skipped (not required)"

      - name: Run baseline check
        id: baseline-check
        run: |
          echo "=== Starting Baseline Check ==="
          
          # Test baseline-lint installation
          echo "Testing baseline-lint CLI..."
          node bin/cli.js --version || {
            echo "‚ùå baseline-lint CLI test failed"
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 1
          }
          
          # Find changed files using a simpler approach
          echo "=== Finding Changed Files ==="
          
          # Get changed files from the PR
          CHANGED_FILES=""
          
          # Try to get files from PR context first
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Using PR context to find changed files..."
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            
            if [ -n "$BASE_SHA" ] && [ -n "$HEAD_SHA" ]; then
              echo "Comparing $BASE_SHA..$HEAD_SHA"
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_SHA $HEAD_SHA | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Found files: $CHANGED_FILES"
            fi
          fi
          
          # Fallback: check all CSS/JS files in current commit
          if [ -z "$CHANGED_FILES" ]; then
            echo "Fallback: Checking all CSS/JS files in current commit..."
            CHANGED_FILES=$(find . -name "*.css" -o -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | grep -v node_modules | head -10)
            echo "Found files: $CHANGED_FILES"
          fi
          
          # Final check
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== No CSS/JS Files Found ==="
            echo "No CSS/JS files found to check"
            echo "result=no-changes" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "=== Running Baseline Check ==="
          echo "Files to check: $CHANGED_FILES"
          
          # Run baseline check with timeout using node directly
          echo "Running: node bin/cli.js check $CHANGED_FILES --format json --score"
          
          # Use timeout to prevent hanging
          RESULT=$(timeout 60s node bin/cli.js check $CHANGED_FILES --format json --score 2>&1 || echo "{\"error\": \"baseline-lint timed out or failed\"}")
          echo "Baseline-lint result: $RESULT"
          
          # Check if the result contains an error
          if echo "$RESULT" | grep -q '"error"'; then
            echo "‚ùå baseline-lint execution failed or timed out"
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract score and issues count
          SCORE=$(echo "$RESULT" | jq -r '.score // 100')
          ISSUES=$(echo "$RESULT" | jq -r '.results | length // 0')
          
          echo "result=completed" >> $GITHUB_OUTPUT
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Baseline Score: $SCORE/100"
          echo "‚úÖ Issues Found: $ISSUES"

      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ steps.baseline-check.outputs.result }}';
            const score = '${{ steps.baseline-check.outputs.score }}';
            const issues = '${{ steps.baseline-check.outputs.issues }}';
            
            let comment = '## üîç Baseline Compatibility Check\n\n';
            
            if (result === 'no-changes') {
              comment += '‚úÖ **No CSS/JS files were found to check.**\n\n';
              comment += 'No baseline compatibility check needed.';
            } else if (result === 'completed') {
              const scoreNum = parseInt(score);
              const issuesNum = parseInt(issues);
              
              if (scoreNum >= 90) {
                comment += 'üéâ **Excellent Baseline Compatibility!**\n\n';
              } else if (scoreNum >= 70) {
                comment += '‚ö†Ô∏è **Good Baseline Compatibility**\n\n';
              } else if (scoreNum >= 50) {
                comment += 'üî∂ **Fair Baseline Compatibility**\n\n';
              } else {
                comment += 'üö® **Baseline Compatibility Issues Detected**\n\n';
              }
              
              comment += `**Score:** ${score}/100\n`;
              comment += `**Issues Found:** ${issues}\n\n`;
              
              if (issuesNum > 0) {
                comment += '**Recommendations:**\n';
                comment += '- Consider using widely supported features (baseline: high)\n';
                comment += '- Add fallbacks for newly available features (baseline: low)\n';
                comment += '- Review limited availability features (baseline: false)\n\n';
                comment += '**View detailed results:** Check the workflow logs for specific file issues.\n\n';
              } else {
                comment += 'üéØ **Perfect! No baseline compatibility issues found.**\n\n';
              }
              
              comment += '**Install baseline-lint:** `npm install -g baseline-lint`\n';
              comment += '**Check your code:** `baseline-lint check ./src --score`';
            } else {
              comment += '‚ùå **Baseline Check Failed**\n\n';
              comment += 'Unable to run baseline compatibility check.\n';
              comment += '**Debugging steps:**\n';
              comment += '1. Check the [workflow logs](https://github.com/TAGOOZ/baseline-lint/actions) for details\n';
              comment += '2. Ensure baseline-lint is properly installed\n';
              comment += '3. Verify the files exist and are accessible\n\n';
              comment += '**Manual check:** Run `baseline-lint check . --score` locally';
            }
            
            comment += '\n\n---\n';
            comment += '*Powered by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
