name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  NPM_CACHE_DIR: ~/.npm

jobs:
  # Test job - runs on all platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run all tests
        run: npm run test:all

      - name: Test CLI functionality
        run: |
          chmod +x bin/cli.js
          ./bin/cli.js --help
          ./bin/cli.js check --help

      - name: Test with sample files
        run: |
          ./bin/cli.js check test/integration/test-project/src
          ./bin/cli.js score test/integration/test-project/src

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run lint:check || echo "Linting not configured yet"

      - name: Check TypeScript definitions
        run: npm run type-check || echo "TypeScript check not configured yet"

      - name: Validate package.json
        run: npm pkg validate

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --config audit-ci.json || echo "audit-ci not configured"

  # Build and package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build || echo "Build script not configured"

      - name: Test package installation
        run: |
          npm pack
          npm install -g baseline-lint-*.tgz
          baseline-lint --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: baseline-lint-package
          path: baseline-lint-*.tgz
          retention-days: 30

  # Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          ./bin/cli.js performance
          npm run test:performance || echo "Performance tests not configured"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 7

  # Baseline compatibility check (self-test)
  self-check:
    name: Self Baseline Check
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install baseline-lint globally
        run: npm install -g .

      - name: Check baseline-lint against itself
        run: |
          baseline-lint check ./src --fail-on-error
          baseline-lint score ./src

      - name: Check dashboard
        run: |
          timeout 10s npm run dashboard || echo "Dashboard test completed"

  # Publish to npm (on release)
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, self-check]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version from release tag
        run: |
          npm version ${{ github.event.release.tag_name }} --no-git-tag-version
          npm pkg set version="${{ github.event.release.tag_name }}"

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: Release ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, self-check]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "CI/CD pipeline failed!"
          echo "Check the logs for details."
          # Add notification logic here (Slack, email, etc.)
