name: PR Baseline Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  baseline-check:
    name: Baseline Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run baseline check
        id: baseline-check
        run: |
          echo "=== Running Baseline Check ==="

          # Get changed files from the PR
          CHANGED_FILES=""

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Using PR context to find changed files..."
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"

            if [ -n "$BASE_SHA" ] && [ -n "$HEAD_SHA" ]; then
              echo "Comparing $BASE_SHA..$HEAD_SHA"
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_SHA $HEAD_SHA | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Found files: $CHANGED_FILES"
            fi
          fi

          # Fallback: check files in current commit
          if [ -z "$CHANGED_FILES" ]; then
            echo "Fallback: Checking files in current commit..."
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM HEAD~1 HEAD 2>/dev/null | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
            echo "Found files: $CHANGED_FILES"
          fi

          # Final fallback: check only the test file we created
          if [ -z "$CHANGED_FILES" ]; then
            echo "Final fallback: Checking test files only..."
            CHANGED_FILES=$(find . -name "test-*.css" -o -name "test-*.js" | head -3)
            echo "Found test files: $CHANGED_FILES"
          fi

          # Check if no files found
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== No CSS/JS Files Found ==="
            echo "result=no-changes" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            echo "results_file=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "=== Files to check: ==="
          echo "$CHANGED_FILES"
          echo ""

          # Create a temporary results file
          RESULTS_FILE="/tmp/baseline-results-${{ github.run_id }}.json"
          echo "Results will be saved to: $RESULTS_FILE"

          # Run baseline-lint with JSON output and capture results
          echo "Running: node bin/cli.js check $CHANGED_FILES --format json --score"
          
          # Run the command and capture both stdout and stderr
          if node bin/cli.js check $CHANGED_FILES --format json --score > "$RESULTS_FILE" 2>&1; then
            echo "‚úÖ baseline-lint completed successfully"
            
            # Parse results
            if [ -s "$RESULTS_FILE" ]; then
              echo "Results file content preview:"
              cat "$RESULTS_FILE" | head -20
              
              SCORE=$(jq -r '.score // 100' "$RESULTS_FILE" 2>/dev/null || echo "100")
              ISSUES_COUNT=$(jq -r '.results | map(select(.issues and (.issues | length > 0))) | length' "$RESULTS_FILE" 2>/dev/null || echo "0")
              
              echo "Parsed - Score: $SCORE, Files with Issues: $ISSUES_COUNT"
              echo "result=completed" >> $GITHUB_OUTPUT
              echo "score=$SCORE" >> $GITHUB_OUTPUT
              echo "issues=$ISSUES_COUNT" >> $GITHUB_OUTPUT
              echo "results_file=$RESULTS_FILE" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è No results in output file"
              echo "result=completed" >> $GITHUB_OUTPUT
              echo "score=100" >> $GITHUB_OUTPUT
              echo "issues=0" >> $GITHUB_OUTPUT
              echo "results_file=" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå baseline-lint execution failed"
            echo "Error output:"
            cat "$RESULTS_FILE" || echo "No error output available"
            
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            echo "results_file=" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Generate detailed PR comment
        if: github.event_name == 'pull_request'
        id: comment-generation
        run: |
          echo "=== Generating Detailed PR Comment ==="
          
          # Get outputs from baseline check step
          RESULT="${{ steps.baseline-check.outputs.result }}"
          RESULTS_FILE="${{ steps.baseline-check.outputs.results_file }}"
          SCORE="${{ steps.baseline-check.outputs.score }}"
          
          if [ "$RESULT" = "no-changes" ]; then
            # Generate simple no-changes comment
            cat > /tmp/pr-comment.md << 'EOF'
          ## üéØ Baseline Compatibility Report

          ‚úÖ **No CSS/JS files were changed in this PR.**

          No baseline compatibility check needed.

          ---
          *ü§ñ Generated by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*
          EOF
          elif [ "$RESULT" = "failed" ]; then
            # Generate failure comment
            cat > /tmp/pr-comment.md << 'EOF'
          ## üéØ Baseline Compatibility Report

          ‚ùå **Baseline Check Failed**

          Unable to run baseline compatibility check.

          **Debugging steps:**
          1. Check the [workflow logs](https://github.com/${{ github.repository }}/actions) for details
          2. Ensure baseline-lint is properly installed
          3. Verify the files exist and are accessible

          **Manual check:** Run `baseline-lint check . --score` locally

          ---
          *ü§ñ Generated by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*
          EOF
          elif [ "$RESULT" = "completed" ] && [ -f "$RESULTS_FILE" ]; then
            # Generate detailed comment using the new script
            echo "Generating detailed comment from results file: $RESULTS_FILE"
            
            # Make the script executable and run it
            chmod +x scripts/generate-pr-comment.js
            
            if node scripts/generate-pr-comment.js "$RESULTS_FILE" \
              --repo-owner "${{ github.repository_owner }}" \
              --repo-name "${{ github.event.repository.name }}" \
              > /tmp/pr-comment.md; then
              echo "‚úÖ Detailed comment generated successfully"
            else
              echo "‚ùå Failed to generate detailed comment, falling back to basic comment"
              # Fallback to basic comment
              cat > /tmp/pr-comment.md << EOF
          ## üéØ Baseline Compatibility Report

          **Score:** ${SCORE}/100

          $([ "$SCORE" -ge 90 ] && echo "ÔøΩ **Excellent Baseline Compatibility!**" || \
            [ "$SCORE" -ge 70 ] && echo "‚ö†Ô∏è **Good Baseline Compatibility**" || \
            [ "$SCORE" -ge 50 ] && echo "üî∂ **Fair Baseline Compatibility**" || \
            echo "üö® **Baseline Compatibility Issues Detected**")

          Check the workflow logs for detailed results.

          **Quick Actions:**
          - üîß Fix locally: \`npx baseline-lint check ./src --score\`
          - üìö [Learn about Baseline](https://web.dev/baseline/)

          ---
          *ü§ñ Generated by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*
          EOF
            fi
          else
            # Fallback comment
            cat > /tmp/pr-comment.md << 'EOF'
          ## üéØ Baseline Compatibility Report

          ‚ö†Ô∏è **Unable to generate detailed report**

          Check the workflow logs for more information.

          ---
          *ü§ñ Generated by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*
          EOF
          fi
          
          echo "Generated comment content:"
          cat /tmp/pr-comment.md
          
          # Save comment content for next step
          echo "comment_file=/tmp/pr-comment.md" >> $GITHUB_OUTPUT

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentFile = '${{ steps.comment-generation.outputs.comment_file }}';
            
            let comment = '## üéØ Baseline Compatibility Report\n\n‚ö†Ô∏è **Unable to read generated comment**\n\nCheck the workflow logs for details.\n\n---\n*ü§ñ Generated by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*';
            
            try {
              if (commentFile && fs.existsSync(commentFile)) {
                comment = fs.readFileSync(commentFile, 'utf8');
              }
            } catch (error) {
              console.error('Error reading comment file:', error);
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });