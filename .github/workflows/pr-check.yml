name: PR Baseline Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  baseline-check:
    name: Baseline Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install baseline-lint globally
        run: npm install -g baseline-lint

      - name: Run baseline check
        id: baseline-check
        run: |
          echo "Running baseline-lint on changed files..."
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No CSS/JS files changed"
            echo "result=no-changes" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Run baseline check
          RESULT=$(baseline-lint check $CHANGED_FILES --format json --score 2>/dev/null || echo "{}")
          
          # Extract score and issues count
          SCORE=$(echo "$RESULT" | jq -r '.score // 100')
          ISSUES=$(echo "$RESULT" | jq -r '.results | length // 0')
          
          echo "result=completed" >> $GITHUB_OUTPUT
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "Baseline Score: $SCORE/100"
          echo "Issues Found: $ISSUES"

      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ steps.baseline-check.outputs.result }}';
            const score = '${{ steps.baseline-check.outputs.score }}';
            const issues = '${{ steps.baseline-check.outputs.issues }}';
            
            let comment = '## üîç Baseline Compatibility Check\n\n';
            
            if (result === 'no-changes') {
              comment += '‚úÖ **No CSS/JS files were changed in this PR.**\n\n';
              comment += 'No baseline compatibility check needed.';
            } else if (result === 'completed') {
              const scoreNum = parseInt(score);
              const issuesNum = parseInt(issues);
              
              if (scoreNum >= 90) {
                comment += 'üéâ **Excellent Baseline Compatibility!**\n\n';
              } else if (scoreNum >= 70) {
                comment += '‚ö†Ô∏è **Good Baseline Compatibility**\n\n';
              } else {
                comment += 'üö® **Baseline Compatibility Issues Detected**\n\n';
              }
              
              comment += `**Score:** ${score}/100\n`;
              comment += `**Issues Found:** ${issues}\n\n`;
              
              if (issuesNum > 0) {
                comment += '**Recommendations:**\n';
                comment += '- Consider using widely supported features (baseline: high)\n';
                comment += '- Add fallbacks for newly available features (baseline: low)\n';
                comment += '- Review limited availability features (baseline: false)\n\n';
              }
              
              comment += '**Install baseline-lint:** `npm install -g baseline-lint`\n';
              comment += '**Check your code:** `baseline-lint check ./src --score`';
            } else {
              comment += '‚ùå **Baseline Check Failed**\n\n';
              comment += 'Unable to run baseline compatibility check.\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            comment += '\n\n---\n';
            comment += '*Powered by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });