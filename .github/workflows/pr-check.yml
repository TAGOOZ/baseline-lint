name: PR Baseline Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '18'

jobs:
  baseline-check:
    name: Baseline Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to enable proper git diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: |
          echo "Building baseline-lint package..."
          npm run build || {
            echo "Build failed, but continuing with source files..."
            echo "This is expected if TypeScript build is not configured"
          }
          echo "Build step completed"

      - name: Install baseline-lint globally
        run: npm install -g .

      - name: Run baseline check
        id: baseline-check
        run: |
          echo "Running baseline-lint on changed files..."
          
          # Debug: Show git environment
          echo "=== Git Environment Debug ==="
          echo "Git version: $(git --version)"
          echo "Current branch: $(git branch --show-current)"
          echo "Commit count: $(git rev-list --count HEAD)"
          echo "Recent commits:"
          git log --oneline -3
          echo ""
          
          # Debug: Show available branches
          echo "=== Available Branches ==="
          echo "Local branches:"
          git branch
          echo "Remote branches:"
          git branch -r
          echo ""
          
          # Debug: Show GitHub context
          echo "=== GitHub Context ==="
          echo "Event: ${{ github.event_name }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "PR base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "PR head SHA: ${{ github.event.pull_request.head.sha }}"
          echo ""
          
          # Initialize variables
          CHANGED_FILES=""
          
          # Strategy 1: Use GitHub context for PR events
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "=== Strategy 1: Using GitHub PR Context ==="
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            
            if [ -n "$BASE_SHA" ] && [ -n "$HEAD_SHA" ]; then
              echo "Comparing $BASE_SHA..$HEAD_SHA"
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_SHA $HEAD_SHA | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Strategy 1 result: '$CHANGED_FILES'"
            else
              echo "Strategy 1 failed: Missing SHA values"
            fi
          fi
          
          # Strategy 2: Use base ref comparison
          if [ -z "$CHANGED_FILES" ] && [ -n "${{ github.base_ref }}" ]; then
            echo "=== Strategy 2: Using Base Ref Comparison ==="
            BASE_REF="${{ github.base_ref }}"
            echo "Comparing origin/$BASE_REF...HEAD"
            
            # Ensure we have the base branch
            git fetch origin $BASE_REF:$BASE_REF || echo "Could not fetch base branch"
            
            if git rev-parse origin/$BASE_REF >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM origin/$BASE_REF...HEAD | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Strategy 2 result: '$CHANGED_FILES'"
            else
              echo "Strategy 2 failed: Base branch not available"
            fi
          fi
          
          # Strategy 3: Use main branch comparison
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== Strategy 3: Using Main Branch Comparison ==="
            echo "Comparing origin/main...HEAD"
            
            # Ensure we have main branch
            git fetch origin main:main || echo "Could not fetch main branch"
            
            if git rev-parse origin/main >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Strategy 3 result: '$CHANGED_FILES'"
            else
              echo "Strategy 3 failed: Main branch not available"
            fi
          fi
          
          # Strategy 4: Use HEAD~1 comparison (for shallow clones)
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== Strategy 4: Using HEAD~1 Comparison ==="
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only --diff-filter=AM HEAD~1 HEAD | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
              echo "Strategy 4 result: '$CHANGED_FILES'"
            else
              echo "Strategy 4 failed: HEAD~1 not available"
            fi
          fi
          
          # Strategy 5: Check all files in current commit
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== Strategy 5: Checking All Files in Current Commit ==="
            CHANGED_FILES=$(git ls-tree --name-only HEAD | grep -E '\.(css|js|jsx|ts|tsx)$' || echo "")
            echo "Strategy 5 result: '$CHANGED_FILES'"
            echo "Note: This will check all CSS/JS files, not just changed ones"
          fi
          
          # Final check
          if [ -z "$CHANGED_FILES" ]; then
            echo "=== No CSS/JS Files Found ==="
            echo "No CSS/JS files changed or found"
            echo "result=no-changes" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "=== Final Result ==="
          echo "Changed files: $CHANGED_FILES"
          
          # Test baseline-lint installation
          echo "Testing baseline-lint installation:"
          which baseline-lint || echo "baseline-lint not found in PATH"
          baseline-lint --version || {
            echo "baseline-lint version check failed"
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 1
          }
          
          # Run baseline check
          echo "Running: baseline-lint check $CHANGED_FILES --format json --score"
          RESULT=$(baseline-lint check $CHANGED_FILES --format json --score 2>&1 || echo "{\"error\": \"baseline-lint failed\"}")
          echo "Baseline-lint result: $RESULT"
          
          # Check if the result contains an error
          if echo "$RESULT" | grep -q '"error"'; then
            echo "baseline-lint execution failed"
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract score and issues count
          SCORE=$(echo "$RESULT" | jq -r '.score // 100')
          ISSUES=$(echo "$RESULT" | jq -r '.results | length // 0')
          
          echo "result=completed" >> $GITHUB_OUTPUT
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "Baseline Score: $SCORE/100"
          echo "Issues Found: $ISSUES"

      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ steps.baseline-check.outputs.result }}';
            const score = '${{ steps.baseline-check.outputs.score }}';
            const issues = '${{ steps.baseline-check.outputs.issues }}';
            
            let comment = '## 🔍 Baseline Compatibility Check\n\n';
            
            if (result === 'no-changes') {
              comment += '✅ **No CSS/JS files were changed in this PR.**\n\n';
              comment += 'No baseline compatibility check needed.';
            } else if (result === 'completed') {
              const scoreNum = parseInt(score);
              const issuesNum = parseInt(issues);
              
              if (scoreNum >= 90) {
                comment += '🎉 **Excellent Baseline Compatibility!**\n\n';
              } else if (scoreNum >= 70) {
                comment += '⚠️ **Good Baseline Compatibility**\n\n';
              } else if (scoreNum >= 50) {
                comment += '🔶 **Fair Baseline Compatibility**\n\n';
              } else {
                comment += '🚨 **Baseline Compatibility Issues Detected**\n\n';
              }
              
              comment += `**Score:** ${score}/100\n`;
              comment += `**Issues Found:** ${issues}\n\n`;
              
              if (issuesNum > 0) {
                comment += '**Recommendations:**\n';
                comment += '- Consider using widely supported features (baseline: high)\n';
                comment += '- Add fallbacks for newly available features (baseline: low)\n';
                comment += '- Review limited availability features (baseline: false)\n\n';
                comment += '**View detailed results:** Check the workflow logs for specific file issues.\n\n';
              } else {
                comment += '🎯 **Perfect! No baseline compatibility issues found.**\n\n';
              }
              
              comment += '**Install baseline-lint:** `npm install -g baseline-lint`\n';
              comment += '**Check your code:** `baseline-lint check ./src --score`';
            } else {
              comment += '❌ **Baseline Check Failed**\n\n';
              comment += 'Unable to run baseline compatibility check.\n';
              comment += '**Debugging steps:**\n';
              comment += '1. Check the [workflow logs](https://github.com/TAGOOZ/baseline-lint/actions) for details\n';
              comment += '2. Ensure baseline-lint is properly installed\n';
              comment += '3. Verify the files exist and are accessible\n\n';
              comment += '**Manual check:** Run `baseline-lint check . --score` locally';
            }
            
            comment += '\n\n---\n';
            comment += '*Powered by [baseline-lint](https://www.npmjs.com/package/baseline-lint)*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });